name: CI/CD Pipeline

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master, develop ]

jobs:
  lint:
    name: Code Quality & Linting
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci --prefer-offline

    - name: Run linting
      run: npm run lint

    - name: Check code formatting
      run: npm run lint

  test:
    name: Unit Tests & Coverage
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18, 20, 22]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci --prefer-offline

    - name: Run tests with coverage
      run: npm run test:coverage

    - name: Upload coverage reports to Codecov
      if: matrix.node-version == 20
      uses: codecov/codecov-action@v5
      with:
        file: ./coverage/lcov.info
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
      env:
        CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

    - name: Upload coverage to GitHub
      if: matrix.node-version == 20
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report
        path: coverage/
        retention-days: 7

  build-test:
    name: Build & Integration Tests
    runs-on: ubuntu-latest
    needs: [lint, test]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci --prefer-offline

    - name: Test application startup
      run: |
        timeout 10s npm start || code=$?
        if [[ $code -eq 124 ]]; then
          echo "✅ Application started successfully and was terminated after timeout"
          exit 0
        elif [[ $code -eq 0 ]]; then
          echo "✅ Application started and exited cleanly"
          exit 0
        else
          echo "❌ Application failed to start (exit code: $code)"
          exit $code
        fi

    - name: Create build artifact
      run: |
        mkdir -p dist
        cp -r src dist/
        cp -r devices dist/
        cp -r public dist/
        cp package*.json dist/
        echo "Build completed at $(date)" > dist/build-info.txt

    - name: Upload build artifact
      uses: actions/upload-artifact@v4
      with:
        name: dmx-controller-build
        path: dist/
        retention-days: 30

  security:
    name: Security Audit
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci --prefer-offline

    - name: Run security audit
      run: npm audit --audit-level=moderate

    - name: Run dependency check
      run: npx audit-ci --moderate
      continue-on-error: true